// Generated by CoffeeScript 1.12.6
(function() {
  $(function() {
    var Category;
    Category = (function() {
      function Category(slug) {
        var category;
        this.slug = slug;
        category = this;
        this.page = 1;
        this.max_pages = 1;
        this.pagination = $(".topic-listing").data("pagination");
        this.topicHTML = Handlebars.compile(this.topicHTMLTemplate());
        this.paginationHTML = Handlebars.compile(this.paginationHTMLTemplate());
        this.getPreferences();
        $("#prefix-filter-show-all").click((function(_this) {
          return function(e) {
            e.preventDefault();
            return _this.disablePrefixFiltering();
          };
        })(this));
        $(".prefix-filter-action").click(function(e) {
          var element;
          e.preventDefault();
          element = $(this);
          if (element.children("span").hasClass("glyphicon-ok")) {
            element.children("span").removeClass("glyphicon-ok");
            element.children("span").addClass("glyphicon-remove");
          } else {
            element.children("span").removeClass("glyphicon-remove");
            element.children("span").addClass("glyphicon-ok");
          }
          return category.setPreferences();
        });
        $("nav.pagination-listing").delegate(".change-page", "click", function(e) {
          var element;
          e.preventDefault();
          element = $(this);
          $(".page-link-" + category.page).parent().removeClass("active");
          category.page = parseInt(element.text());
          return category.refreshTopics();
        });
        $("nav.pagination-listing").delegate("#previous-page", "click", function(e) {
          var element;
          e.preventDefault();
          element = $(this);
          if (category.page !== 1) {
            $(".change-page").parent().removeClass("active");
            category.page--;
            return category.refreshTopics();
          }
        });
        $("nav.pagination-listing").delegate("#next-page", "click", function(e) {
          var element;
          e.preventDefault();
          element = $(this);
          if (category.page !== category.max_pages) {
            console.log($(".page-link-" + category.page).parent().next().children("a").text());
            $(".change-page").parent().removeClass("active");
            category.page++;
            return category.refreshTopics();
          }
        });
      }

      Category.prototype.paginationHTMLTemplate = function() {
        return "<ul class=\"pagination\">\n  <li>\n    <a href=\"\" aria-label=\"Previous\" id=\"previous-page\">\n      <span aria-hidden=\"true\">&laquo;</span>\n    </a>\n  </li>\n  {{#each pages}}\n  <li><a href=\"\" class=\"change-page page-link-{{this}}\">{{this}}</a></li>\n  {{/each}}\n  <li>\n    <a href=\"\" aria-label=\"Next\" id=\"next-page\">\n      <span aria-hidden=\"true\">&raquo;</span>\n    </a>\n  </li>\n</ul>";
      };

      Category.prototype.topicHTMLTemplate = function() {
        return "  <div class=\"row\">\n    <div class=\"col-xs-12 col-sm-5\">\n      <span class=\"topic-listing-name\">\n      {{#if prefix}}\n      {{{pre_html}}}\n        {{#if sticky}}<span class=\"glyphicon glyphicon-pushpin\" aria-hidden=\"true\"></span>&nbsp;{{/if}}\n        {{#if closed}}<span class=\"glyphicon glyphicon-lock\" aria-hidden=\"true\"></span>&nbsp;{{/if}}\n        {{{prefix}}}\n      {{{post_html}}}\n      {{else}}\n      {{#if sticky}}<span class=\"glyphicon glyphicon-pushpin\" aria-hidden=\"true\"></span>&nbsp;{{/if}}\n      {{#if closed}}<span class=\"glyphicon glyphicon-lock\" aria-hidden=\"true\"></span>&nbsp;{{/if}}\n      {{/if}}\n      <a href=\"/t/{{slug}}/page/1/post/last_seen\">{{#if updated}}<strong>{{/if}}{{title}}{{#if updated}}</strong>{{/if}}</a><br>\n      <span class=\"topic-author hidden-xs\">\n        Started by {{creator}}, {{created}}\n      </span>\n      <span class=\"topic-author hidden-sm hidden-md hidden-lg\">\n        <a href=\"/t/{{slug}}/page/1/post/last_seen\">Last Post by {{last_post_by}}&nbsp;&nbsp;|&nbsp;&nbsp;{{last_post_date}}</a>\n      </span>\n      <span class=\"topic-listing-jumps hidden-xs hidden-sm\">\n        <span class=\"badge\" style=\"\"><a class=\"inherit_colors\" href=\"/t/{{slug}}/page/1\">1</a></span>\n        {{#if last_pages}}\n        <span class=\"badge\" style=\"\">...</span>\n        <span class=\"badge\" style=\"\"><a class=\"inherit_colors\" href=\"/t/{{slug}}/page/1/post/last_seen\">{{last_page}}</a></span>\n        {{/if}}\n      </span>\n      <div class=\"topic-author hidden-xs\">\n      {{preview}}\n      </div>\n    </div>\n    <div class=\"col-xs-3 hidden-xs hidden-sm\">\n      <span class=\"topic-listing-recent\">\n        <a href=\"\" class=\"topic-listing-text\">{{post_count}} replies</a>\n        <br>\n        {{view_count}} views\n      </span>\n    </div>\n    <div class=\"col-xs-6 col-sm-4 hidden-xs\">\n      <span class=\"topic-listing-recent-image subcategory-listing-recent-image\">\n        <a href=\"/member/{{last_post_by_login_name}}\"><img src=\"{{last_post_author_avatar}}\" width=\"{{last_post_x}}px\" height=\"{{last_post_y}}px\" class=\"avatar-mini\"></a>\n      </span>\n      <span class=\"topic-listing-recent\">\n        <a href=\"/member/{{last_post_by_login_name}}\" class=\"topic-listing-username hover_user\">{{last_post_by}}</a>\n        <br>\n        <a href=\"/t/{{slug}}/page/1/post/last_seen\" class=\"topic-listing-time\">{{last_post_date}}</a>\n      </span>\n    </div>\n  </div>\n</div>\n{{#unless last}}\n<hr>\n{{/unless}}";
      };

      Category.prototype.refreshTopics = function() {
        var new_topic_html;
        new_topic_html = "";
        return $.post("/category/" + this.slug + "/topics", JSON.stringify({
          page: this.page,
          pagination: this.pagination
        }), (function(_this) {
          return function(data) {
            var i, j, k, l, len, m, n, pages, pagination_html, ref, ref1, ref2, ref3, ref4, ref5, ref6, results, results1, results2, results3, topic;
            ref = data.topics;
            for (i = j = 0, len = ref.length; j < len; i = ++j) {
              topic = ref[i];
              if (i === data.topics.length - 1) {
                topic.last = true;
              }
              topic.last_page = Math.ceil(topic.last_page);
              new_topic_html = new_topic_html + _this.topicHTML(topic);
            }
            pages = [];
            _this.max_pages = Math.ceil(data.count / _this.pagination);
            if (_this.max_pages > 5) {
              if (_this.page > 3 && _this.page < _this.max_pages - 5) {
                pages = (function() {
                  results = [];
                  for (var k = ref1 = _this.page - 2, ref2 = _this.page + 5; ref1 <= ref2 ? k <= ref2 : k >= ref2; ref1 <= ref2 ? k++ : k--){ results.push(k); }
                  return results;
                }).apply(this);
              } else if (_this.page > 3) {
                pages = (function() {
                  results1 = [];
                  for (var l = ref3 = _this.page - 2, ref4 = _this.max_pages; ref3 <= ref4 ? l <= ref4 : l >= ref4; ref3 <= ref4 ? l++ : l--){ results1.push(l); }
                  return results1;
                }).apply(this);
              } else if (_this.page <= 3) {
                pages = (function() {
                  results2 = [];
                  for (var m = 1, ref5 = _this.page + 5; 1 <= ref5 ? m <= ref5 : m >= ref5; 1 <= ref5 ? m++ : m--){ results2.push(m); }
                  return results2;
                }).apply(this);
              }
            } else {
              pages = (function() {
                results3 = [];
                for (var n = 1, ref6 = Math.ceil(data.count / _this.pagination); 1 <= ref6 ? n <= ref6 : n >= ref6; 1 <= ref6 ? n++ : n--){ results3.push(n); }
                return results3;
              }).apply(this);
            }
            pagination_html = _this.paginationHTML({
              pages: pages
            });
            $(".topic-listing").html(new_topic_html);
            $(".pagination-listing").html(pagination_html);
            return $(".page-link-" + _this.page).parent().addClass("active");
          };
        })(this));
      };

      Category.prototype.disablePrefixFiltering = function() {
        $(".prefix-filter-action").children("span").removeClass("glyphicon-remove");
        $(".prefix-filter-action").children("span").addClass("glyphicon-ok");
        return this.setPreferences();
      };

      Category.prototype.setPreferences = function() {
        var category;
        this.preferences = {};
        category = this;
        if ($(".prefix-filter-action").children(".glyphicon-remove").length > 0) {
          $(".prefix-filter-action").children(".glyphicon-ok").parent().each(function() {
            var element;
            element = $(this);
            return category.preferences[element.data("prefix")] = 1;
          });
        }
        return $.post("/category/" + this.slug + "/filter-preferences", JSON.stringify({
          preferences: this.preferences
        }), (function(_this) {
          return function(data) {
            return _this.refreshTopics();
          };
        })(this));
      };

      Category.prototype.getPreferences = function() {
        return $.get("/category/" + this.slug + "/filter-preferences", (function(_this) {
          return function(data) {
            var prefix;
            _this.preferences = data.preferences;
            if ($.isEmptyObject(_this.preferences)) {
              return _this.disablePrefixFiltering();
            } else {
              $(".prefix-filter-action").children("span").removeClass("glyphicon-ok");
              $(".prefix-filter-action").children("span").addClass("glyphicon-remove");
              for (prefix in _this.preferences) {
                $("[data-prefix='" + prefix + "']").children("span").removeClass("glyphicon-remove");
                $("[data-prefix='" + prefix + "']").children("span").addClass("glyphicon-ok");
              }
              return _this.refreshTopics();
            }
          };
        })(this));
      };

      return Category;

    })();
    return window.category = new Category($(".topic-listing").data("slug"));
  });

}).call(this);
